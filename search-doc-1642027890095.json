[{"title":"Hey there, RSS!","type":0,"sectionRef":"#","url":"docs/fundamentals/heyrss","content":"Hey there, RSS! note Make sure you already have rss installed before proceding. Start by adding a LocalScript to StarterGui and put this: local rss = require(path/to/rss) local frame = Instance.new(&quot;Frame&quot;) frame.Parent = game.StarterGui rss.style({padding = 1, corner = 5}, frame) Copy You should see a Frame pop up with corner radius and padding. In RSS, we style components with a single function called rss.style() which reads a dictionary of styles you pass and an element. Learn more about rss.style() in the API page.","keywords":""},{"title":"MainModule","type":0,"sectionRef":"#","url":"api/MainModule","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"MainModule","url":"api/MainModule#functions","content":" "},{"title":"style​","type":1,"pageTitle":"MainModule","url":"api/MainModule#style","content":"&lt;/&gt; MainModule.style( stylesheets: Types.Stylesheet, styles: string | Types.Stylesheet, element: GuiObject? ) → {Instance }  "},{"title":"Intro to Stylesheet files","type":0,"sectionRef":"#","url":"docs/advanced/stylesheetFiles","content":"","keywords":""},{"title":"Creating a Stylesheet file​","type":1,"pageTitle":"Intro to Stylesheet files","url":"docs/advanced/stylesheetFiles#creating-a-stylesheet-file","content":"First, create a ModuleScript with any name and a .stylesheet extension at the end. (If you are using Rojo you will do a .stylesheet.lua extension) Then you will return a Dictionary. return { } Copy Pretty simple huh? Now we can just add our styles. return { padding = {1,5,6,2} } Copy "},{"title":"Using Stylesheet files​","type":1,"pageTitle":"Intro to Stylesheet files","url":"docs/advanced/stylesheetFiles#using-stylesheet-files","content":"Now you may ask, what do we use these files for? In our components of course! To use a stylesheet file you will use rss.style(&quot;NameOfTheFileWithoutExtension&quot;). Make sure to not include the .stylesheet extension. With that the component will get that file's content! "},{"title":"Simplified Styles","type":0,"sectionRef":"#","url":"docs/fundamentals/simplifiedStyles","content":"","keywords":""},{"title":"UIPadding​","type":1,"pageTitle":"Simplified Styles","url":"docs/fundamentals/simplifiedStyles#uipadding","content":"Padding is one of our biggest simplified values. Instead of the clunky PaddingTop and PaddingRight you can now pass a single number to apply to all values or an array of 4 numbers each one representing a side for the padding. Keep in mind that all values are also done in Scale. Order for padding numbers: TopRightBottomLeft Lets see how padding is in action: local rss = require(path/to/rss) local frame = Instance.new(&quot;Frame&quot;) frame.Parent = game.StarterGui rss.style({padding = 5}, frame) -- This will add `5` for all sides for padding rss.style({padding = {1,2,3,4}}, frame) -- This will add 1 for top, 2 for right, 3 for bottom, and 4 for left Copy "},{"title":"UICorner & UIScale​","type":1,"pageTitle":"Simplified Styles","url":"docs/fundamentals/simplifiedStyles#uicorner--uiscale","content":"Corner and Scale are very similar. For Corner you can pass a UDim value, and for scale you can pass a number value. Lets see how corner and scale are in action: local rss = require(path/to/rss) local frame = Instance.new(&quot;Frame&quot;) frame.Parent = game.StarterGui rss.style({corner = UDim.new(1,0), scale = 4}, frame) -- This will add `5` for all sides for padding Copy "},{"title":"Welcome to RSS","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"with Roarn (recommended for Rojo users)​","type":1,"pageTitle":"Welcome to RSS","url":"docs/intro#with-roarn-recommended-for-rojo-users","content":"To install rss with Roarn you can simply do the following command: roarn install rss Copy Learn more on how Roarn, a Roblox package manager helps your workspace. "},{"title":"with Roblox​","type":1,"pageTitle":"Welcome to RSS","url":"docs/intro#with-roblox","content":"If you are preferably using Roblox Studio to develop code you can also install our module through the Roblox marketplace. Roblox Module "},{"title":"with GitHub​","type":1,"pageTitle":"Welcome to RSS","url":"docs/intro#with-github","content":"You can also install our package from GitHub releases easily. info We have ZIP files available for Rojo users although we would prefer you using Roarn for a more organized workspace. "},{"title":"Interpretations","type":0,"sectionRef":"#","url":"api/Interpretations","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Interpretations","url":"api/Interpretations#functions","content":" "},{"title":"applyAspectRatio​","type":1,"pageTitle":"Interpretations","url":"api/Interpretations#applyAspectRatio","content":"&lt;/&gt; Interpretations.applyAspectRatio( stylesheet: Types.Stylesheet, element: GuiObject? ) → Instance    "},{"title":"applyCorner​","type":1,"pageTitle":"Interpretations","url":"api/Interpretations#applyCorner","content":"&lt;/&gt; Interpretations.applyCorner( stylesheet: Types.Stylesheet, element: GuiObject? ) → Instance    "},{"title":"applyGridLayout​","type":1,"pageTitle":"Interpretations","url":"api/Interpretations#applyGridLayout","content":"&lt;/&gt; Interpretations.applyGridLayout( stylesheet: Types.Stylesheet, element: GuiObject? ) → Instance    "},{"title":"applyListLayout​","type":1,"pageTitle":"Interpretations","url":"api/Interpretations#applyListLayout","content":"&lt;/&gt; Interpretations.applyListLayout( stylesheet: Types.Stylesheet, element: GuiObject? ) → Instance    "},{"title":"applyPadding​","type":1,"pageTitle":"Interpretations","url":"api/Interpretations#applyPadding","content":"&lt;/&gt; Interpretations.applyPadding( stylesheet: Types.Stylesheet, element: GuiObject? ) → Instance    "},{"title":"applyPageLayout​","type":1,"pageTitle":"Interpretations","url":"api/Interpretations#applyPageLayout","content":"&lt;/&gt; Interpretations.applyPageLayout( stylesheet: Types.Stylesheet, element: GuiObject? ) → Instance    "},{"title":"applyScale​","type":1,"pageTitle":"Interpretations","url":"api/Interpretations#applyScale","content":"&lt;/&gt; Interpretations.applyScale( stylesheet: Types.Stylesheet, element: GuiObject? ) → Instance    "},{"title":"applyTableLayout​","type":1,"pageTitle":"Interpretations","url":"api/Interpretations#applyTableLayout","content":"&lt;/&gt; Interpretations.applyTableLayout( stylesheet: Types.Stylesheet, element: GuiObject? ) → Instance    "},{"title":"applyTextSize​","type":1,"pageTitle":"Interpretations","url":"api/Interpretations#applyTextSize","content":"&lt;/&gt; Interpretations.applyTextSize( stylesheet: Types.Stylesheet, element: GuiObject? ) → Instance   "},{"title":"External Libraries","type":0,"sectionRef":"#","url":"docs/advanced/fusion","content":"","keywords":""},{"title":"Fusion​","type":1,"pageTitle":"External Libraries","url":"docs/advanced/fusion#fusion","content":"When using RSS with Fusion you do not need to pass any elements as it appends to the child automatically. local Fusion = require(path/to/fusion) local New = Fusion.New New &quot;Frame&quot; { Parent = script, [Children] = { rss.style({padding = 6}), New &quot;TextButton&quot; { Text = &quot;Fusion + RSS :D&quot; } } } Copy "},{"title":"Roact​","type":1,"pageTitle":"External Libraries","url":"docs/advanced/fusion#roact","content":"Roact works the same way as Fusion, with of course changing the layout for Roact. local Roact = require(script.Parent.Parent.Roact) local rss = require(script.Parent.Parent.rss) local app = Roact.createElement(&quot;ScreenGui&quot;, {}, { HelloWorld = Roact.createElement(&quot;TextLabel&quot;, { Size = UDim2.new(0, 400, 0, 300), Text = &quot;Hello, Roact!&quot; }, rss.style({padding = 5})) }) Roact.mount(app, script) Copy "}]